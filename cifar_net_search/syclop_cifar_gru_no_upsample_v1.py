'''
The follwing code runs a test lstm network on the CIFAR dataset 

I will explicitly write the networks here for ease of understanding 

same as v0 but with kernel size 2x2

All seem to learn similarly and after ~100 reach 56% with almost no overfitting (l1 more overfitting then l2)
out.259057/262174 regulizer = l1l2

out.259085/262143 regulizer = l1
################# cnn_gru_v1_1 Validation Accuracy =  [0.29019999504089355, 0.3375999927520752, 0.3546000123023987, 0.40880000591278076, 0.42660000920295715, 0.45419999957084656, 0.45820000767707825, 0.42719998955726624, 0.4717999994754791, 0.46779999136924744, 0.47440001368522644, 0.4925999939441681, 0.4740000069141388, 0.5026000142097473, 0.5105999708175659, 0.5090000033378601, 0.5044000148773193, 0.5037999749183655, 0.5040000081062317, 0.5238000154495239, 0.5281999707221985, 0.5099999904632568, 0.5167999863624573, 0.5278000235557556, 0.5325999855995178, 0.5184000134468079, 0.5216000080108643, 0.531000018119812, 0.5371999740600586, 0.5429999828338623, 0.5442000031471252, 0.5450000166893005, 0.5397999882698059, 0.5338000059127808, 0.5436000227928162, 0.5332000255584717, 0.546999990940094, 0.5622000098228455, 0.5447999835014343, 0.546999990940094, 0.5400000214576721, 0.5509999990463257, 0.5442000031471252, 0.545799970626831, 0.5568000078201294, 0.5440000295639038, 0.5609999895095825, 0.5479999780654907, 0.5460000038146973, 0.5490000247955322, 0.5609999895095825, 0.571399986743927, 0.5360000133514404, 0.5544000267982483, 0.5600000023841858, 0.5400000214576721, 0.5623999834060669, 0.5496000051498413, 0.5537999868392944, 0.5565999746322632, 0.548799991607666, 0.548799991607666, 0.5576000213623047, 0.5252000093460083, 0.5662000179290771, 0.5590000152587891, 0.5616000294685364, 0.5523999929428101, 0.5455999970436096, 0.5612000226974487, 0.5558000206947327, 0.5667999982833862, 0.5685999989509583, 0.546999990940094, 0.5447999835014343, 0.5608000159263611, 0.557200014591217, 0.5681999921798706, 0.5627999901771545, 0.5565999746322632, 0.5637999773025513, 0.5699999928474426, 0.5511999726295471, 0.548799991607666, 0.5582000017166138, 0.5465999841690063, 0.5654000043869019, 0.5640000104904175, 0.5595999956130981, 0.546999990940094, 0.5672000050544739, 0.5515999794006348, 0.5651999711990356, 0.5636000037193298, 0.5540000200271606, 0.5486000180244446, 0.5591999888420105, 0.5540000200271606, 0.5648000240325928, 0.5712000131607056]
################# cnn_gru_v1_1 Training Accuracy =  [0.2622666656970978, 0.33968889713287354, 0.3642444312572479, 0.3925110995769501, 0.41091111302375793, 0.42091110348701477, 0.4330666661262512, 0.44564443826675415, 0.45097777247428894, 0.4608444571495056, 0.46355554461479187, 0.47075554728507996, 0.47697776556015015, 0.47993332147598267, 0.4864000082015991, 0.4901111125946045, 0.49257779121398926, 0.49453333020210266, 0.5026000142097473, 0.505311131477356, 0.5091111063957214, 0.5121111273765564, 0.5130888819694519, 0.5147110819816589, 0.5192000269889832, 0.5173110961914062, 0.5229555368423462, 0.5232666730880737, 0.5279111266136169, 0.5319111347198486, 0.5311333537101746, 0.5326889157295227, 0.5350221991539001, 0.5383333563804626, 0.5368221998214722, 0.5394444465637207, 0.5376889109611511, 0.5452666878700256, 0.5435777902603149, 0.5429999828338623, 0.5480222105979919, 0.5498444437980652, 0.5503110885620117, 0.5501555800437927, 0.5516889095306396, 0.5517777800559998, 0.5561110973358154, 0.5527777671813965, 0.5580888986587524, 0.5570444464683533, 0.5583778023719788, 0.5585333108901978, 0.5616000294685364, 0.5622444152832031, 0.5606444478034973, 0.5636888742446899, 0.5636666417121887, 0.562333345413208, 0.5668888688087463, 0.5721111297607422, 0.5687999725341797, 0.5686666369438171, 0.5700666904449463, 0.5724889039993286, 0.5728889107704163, 0.5757555365562439, 0.5734666585922241, 0.5788888931274414, 0.5781555771827698, 0.579622209072113, 0.5778889060020447, 0.5795111060142517, 0.5811111330986023, 0.5820666551589966, 0.5806888937950134, 0.5853777527809143, 0.5848888754844666, 0.5839999914169312, 0.5840666890144348, 0.5865333080291748, 0.5896444320678711, 0.5898000001907349, 0.5896888971328735, 0.5908666849136353, 0.5911111235618591, 0.5917555689811707, 0.5932888984680176, 0.5918444395065308, 0.5925333499908447, 0.594955563545227, 0.5933777689933777, 0.5951777696609497, 0.5951777696609497, 0.601111114025116, 0.597599983215332, 0.6008444428443909, 0.603422224521637, 0.603244423866272, 0.6040444374084473, 0.6064666509628296]
################# cnn_gru_v1_1 Validation Accuracy =  [0.29339998960494995, 0.34459999203681946, 0.3709999918937683, 0.3921999931335449, 0.4146000146865845, 0.41760000586509705, 0.4185999929904938, 0.42260000109672546, 0.4458000063896179, 0.44020000100135803, 0.4828000068664551, 0.4708000123500824, 0.4708000123500824, 0.49140000343322754, 0.4968000054359436, 0.48179998993873596, 0.49459999799728394, 0.4952000081539154, 0.5058000087738037, 0.5091999769210815, 0.5257999897003174, 0.5181999802589417, 0.5175999999046326, 0.5252000093460083, 0.5317999720573425, 0.5365999937057495, 0.5383999943733215, 0.5392000079154968, 0.5432000160217285, 0.5450000166893005, 0.5496000051498413, 0.5388000011444092, 0.5576000213623047, 0.5436000227928162, 0.5533999800682068, 0.5622000098228455, 0.5565999746322632, 0.5630000233650208, 0.5586000084877014, 0.5613999962806702, 0.5541999936103821, 0.5651999711990356, 0.5645999908447266, 0.5654000043869019, 0.5613999962806702, 0.5676000118255615, 0.5622000098228455, 0.5741999745368958, 0.569599986076355, 0.5644000172615051]
################# cnn_gru_v1_1 Training Accuracy =  [0.24015556275844574, 0.3203555643558502, 0.3474000096321106, 0.36764445900917053, 0.38940000534057617, 0.40684443712234497, 0.41768887639045715, 0.42553332448005676, 0.43664443492889404, 0.44262221455574036, 0.448711097240448, 0.4577333331108093, 0.46184444427490234, 0.46480000019073486, 0.4739777743816376, 0.4776444435119629, 0.4803333282470703, 0.4843111038208008, 0.48857778310775757, 0.491822212934494, 0.49371111392974854, 0.500177800655365, 0.5022222399711609, 0.5076000094413757, 0.5088000297546387, 0.5119555592536926, 0.5189777612686157, 0.5193777680397034, 0.5210222005844116, 0.5225333571434021, 0.526533305644989, 0.5290889143943787, 0.5325999855995178, 0.5333999991416931, 0.533644437789917, 0.5365111231803894, 0.5392444729804993, 0.5444889068603516, 0.5415999889373779, 0.5457777976989746, 0.5462222099304199, 0.5486888885498047, 0.5466222167015076, 0.5522000193595886, 0.5532444715499878, 0.5527777671813965, 0.5553777813911438, 0.5563555359840393, 0.5566222071647644, 0.5610222220420837]

out.259095/262158 regulizer = l2
################# cnn_gru_v1_1 Validation Accuracy =  [0.2687999904155731, 0.3531999886035919, 0.38260000944137573, 0.39259999990463257, 0.4113999903202057, 0.41440001130104065, 0.43619999289512634, 0.42980000376701355, 0.4357999861240387, 0.4375999867916107, 0.4537999927997589, 0.45080000162124634, 0.44620001316070557, 0.4643999934196472, 0.4390000104904175, 0.4602000117301941, 0.4787999987602234, 0.4706000089645386, 0.46619999408721924, 0.46880000829696655, 0.47200000286102295, 0.48919999599456787, 0.47760000824928284, 0.48339998722076416, 0.49320000410079956, 0.4991999864578247, 0.5008000135421753, 0.5004000067710876, 0.4984000027179718, 0.5034000277519226, 0.5113999843597412, 0.5072000026702881, 0.5076000094413757, 0.5054000020027161, 0.5077999830245972, 0.506600022315979, 0.5070000290870667, 0.5210000276565552, 0.5121999979019165, 0.5149999856948853, 0.5139999985694885, 0.5249999761581421, 0.5284000039100647, 0.5234000086784363, 0.5184000134468079, 0.5210000276565552, 0.5306000113487244, 0.5364000201225281, 0.5221999883651733, 0.5333999991416931, 0.5264000296592712, 0.5407999753952026, 0.5422000288963318, 0.5248000025749207, 0.5332000255584717, 0.5522000193595886, 0.5351999998092651, 0.5388000011444092, 0.5422000288963318, 0.5364000201225281, 0.5288000106811523, 0.545199990272522, 0.553600013256073, 0.5410000085830688, 0.546999990940094, 0.5550000071525574, 0.5440000295639038, 0.5307999849319458, 0.550000011920929, 0.5432000160217285, 0.5576000213623047, 0.5576000213623047, 0.5490000247955322, 0.5393999814987183, 0.5641999840736389, 0.5640000104904175, 0.5577999949455261, 0.5371999740600586, 0.5504000186920166, 0.5605999827384949, 0.5547999739646912, 0.5532000064849854, 0.5419999957084656, 0.5533999800682068, 0.5475999712944031, 0.5555999875068665, 0.5511999726295471, 0.5591999888420105, 0.5464000105857849, 0.555400013923645, 0.5540000200271606, 0.5636000037193298, 0.5703999996185303, 0.5648000240325928, 0.5673999786376953, 0.5654000043869019, 0.5529999732971191, 0.5702000260353088, 0.5613999962806702, 0.5712000131607056]
################# cnn_gru_v1_1 Training Accuracy =  [0.21924445033073425, 0.3082444369792938, 0.34377777576446533, 0.362888902425766, 0.37557777762413025, 0.3853999972343445, 0.3938888907432556, 0.40175554156303406, 0.40824443101882935, 0.4107777774333954, 0.41706666350364685, 0.42017778754234314, 0.4236888885498047, 0.4317333400249481, 0.4331555664539337, 0.4384889006614685, 0.43957778811454773, 0.4456222355365753, 0.4487777650356293, 0.45017778873443604, 0.4551111161708832, 0.4585333466529846, 0.46264445781707764, 0.4646444320678711, 0.46595555543899536, 0.4711333215236664, 0.4773111045360565, 0.4772000014781952, 0.4812222123146057, 0.48446667194366455, 0.4863555431365967, 0.48908889293670654, 0.4927777647972107, 0.4957999885082245, 0.4995777904987335, 0.5012221932411194, 0.5040000081062317, 0.5051555633544922, 0.5117555260658264, 0.5087555646896362, 0.5144888758659363, 0.5137333273887634, 0.5155110955238342, 0.5124444365501404, 0.5156444311141968, 0.5177111029624939, 0.5185333490371704, 0.5223555564880371, 0.5217111110687256, 0.5230888724327087, 0.5242000222206116, 0.5264666676521301, 0.530044436454773, 0.5284000039100647, 0.5307999849319458, 0.5335555672645569, 0.5328888893127441, 0.5347999930381775, 0.5370000004768372, 0.5365111231803894, 0.5378000140190125, 0.5391333103179932, 0.5426222085952759, 0.5414000153541565, 0.5411555767059326, 0.5443778038024902, 0.5451333522796631, 0.5456444621086121, 0.5449555516242981, 0.5495555400848389, 0.5462222099304199, 0.5486000180244446, 0.5470222234725952, 0.5485555529594421, 0.5546888709068298, 0.5487777590751648, 0.5495555400848389, 0.5536222457885742, 0.5540444254875183, 0.5533333420753479, 0.5540888905525208, 0.5553333163261414, 0.5552444458007812, 0.5544221997261047, 0.5561555624008179, 0.5558444261550903, 0.5561555624008179, 0.5592222213745117, 0.5587777495384216, 0.5609999895095825, 0.5598666667938232, 0.5647110939025879, 0.5638222098350525, 0.5635777711868286, 0.5638666749000549, 0.5627999901771545, 0.5665777921676636, 0.5645333528518677, 0.5648000240325928, 0.5654000043869019]
################# cnn_gru_v1_1 Validation Accuracy =  [0.33340001106262207, 0.32019999623298645, 0.4099999964237213, 0.42559999227523804, 0.4415999948978424, 0.4603999853134155, 0.4618000090122223, 0.4702000021934509, 0.47440001368522644, 0.46639999747276306, 0.4790000021457672, 0.47859999537467957, 0.49799999594688416, 0.4860000014305115, 0.4968000054359436, 0.5073999762535095, 0.49900001287460327, 0.501800000667572, 0.5040000081062317, 0.4984000027179718, 0.5221999883651733, 0.527999997138977, 0.5189999938011169, 0.5289999842643738, 0.5335999727249146, 0.5314000248908997, 0.5275999903678894, 0.5335999727249146, 0.5374000072479248, 0.5347999930381775, 0.532800018787384, 0.5410000085830688, 0.5361999869346619, 0.5293999910354614, 0.5131999850273132, 0.5383999943733215, 0.550599992275238, 0.5231999754905701, 0.5411999821662903, 0.5429999828338623, 0.5568000078201294, 0.527400016784668, 0.5482000112533569, 0.5429999828338623, 0.5559999942779541, 0.5461999773979187, 0.5382000207901001, 0.5443999767303467, 0.5540000200271606, 0.5550000071525574]
################# cnn_gru_v1_1 Training Accuracy =  [0.2601333260536194, 0.3315333425998688, 0.36935555934906006, 0.392977774143219, 0.41233333945274353, 0.4195111095905304, 0.4308222234249115, 0.4400666654109955, 0.4454222321510315, 0.45426666736602783, 0.4568222165107727, 0.4616888761520386, 0.46753332018852234, 0.472555547952652, 0.47957777976989746, 0.48073333501815796, 0.4864000082015991, 0.49311110377311707, 0.49480000138282776, 0.5004444718360901, 0.5004666447639465, 0.5041999816894531, 0.5056889057159424, 0.5113111138343811, 0.5105111002922058, 0.5175555348396301, 0.5181778073310852, 0.5190444588661194, 0.5234222412109375, 0.5214889049530029, 0.5243333578109741, 0.5274222493171692, 0.5315333604812622, 0.5315777659416199, 0.5350000262260437, 0.5357333421707153, 0.5339555740356445, 0.5383555293083191, 0.5402888655662537, 0.5436221957206726, 0.5437777638435364, 0.544355571269989, 0.5478666424751282, 0.550599992275238, 0.5516666769981384, 0.5527777671813965, 0.5507110953330994, 0.5560666918754578, 0.5528444647789001, 0.5573999881744385]

out.258931/262122 - regulkizer = None
################# cnn_gru_v1_1 Validation Accuracy =  [0.35420000553131104, 0.4020000100135803, 0.41659998893737793, 0.4580000042915344, 0.4593999981880188, 0.4652000069618225, 0.5023999810218811, 0.5081999897956848, 0.5063999891281128, 0.5027999877929688, 0.5105999708175659, 0.5167999863624573, 0.521399974822998, 0.52920001745224, 0.5397999882698059, 0.5333999991416931, 0.5382000207901001, 0.5371999740600586, 0.5442000031471252, 0.5582000017166138, 0.5465999841690063, 0.5631999969482422, 0.5564000010490417, 0.5573999881744385, 0.5601999759674072, 0.5623999834060669, 0.5541999936103821, 0.5608000159263611, 0.5612000226974487, 0.5633999705314636, 0.5631999969482422, 0.5623999834060669, 0.5698000192642212, 0.5595999956130981, 0.5562000274658203, 0.5763999819755554, 0.5809999704360962, 0.5834000110626221, 0.574999988079071, 0.569599986076355, 0.5654000043869019, 0.5658000111579895, 0.576200008392334, 0.5576000213623047, 0.5577999949455261, 0.5651999711990356, 0.5766000151634216, 0.5741999745368958, 0.5803999900817871, 0.573199987411499]
################# cnn_gru_v1_1 Training Accuracy =  [0.26555556058883667, 0.36622223258018494, 0.40459999442100525, 0.42542222142219543, 0.4414222240447998, 0.45515555143356323, 0.46631109714508057, 0.47573333978652954, 0.48346665501594543, 0.49433332681655884, 0.4991777837276459, 0.5089111328125, 0.5138000249862671, 0.5208666920661926, 0.5198000073432922, 0.5243777632713318, 0.531844437122345, 0.5341110825538635, 0.543066680431366, 0.5468000173568726, 0.5462666749954224, 0.5533333420753479, 0.5587999820709229, 0.5595999956130981, 0.562844455242157, 0.5675110816955566, 0.570288896560669, 0.5730222463607788, 0.5763111114501953, 0.5781777501106262, 0.5789777636528015, 0.5846222043037415, 0.5877110958099365, 0.5905777812004089, 0.5951111316680908, 0.5948888659477234, 0.6020444631576538, 0.6000444293022156, 0.605222225189209, 0.6094889044761658, 0.6091777682304382, 0.6132000088691711, 0.6182888746261597, 0.6210888624191284, 0.6205999851226807, 0.6211555600166321, 0.6267555356025696, 0.6307777762413025, 0.6331333518028259, 0.6321333050727844]

 200 20 8 256 1 3 0
out.417474

'''

from __future__ import division, print_function, absolute_import

print('Starting..................................')
import os
import sys
sys.path.insert(1, '/home/labs/ahissarlab/orra/imagewalker/')
import numpy as np
import cv2
import misc
import pandas as pd
import matplotlib.pyplot as plt
import pickle

from keras_utils import dataset_update, write_to_file, create_cifar_dataset
from misc import *

import tensorflow.keras as keras
import tensorflow as tf

from tensorflow.keras.datasets import cifar10

# load dataset
(trainX, trainy), (testX, testy) = cifar10.load_data()
images, labels = trainX, trainy

kernel_regularizer_list = [None, keras.regularizers.l1(),keras.regularizers.l2(),keras.regularizers.l1_l2()]
optimizer_list = [tf.keras.optimizers.Adam, tf.keras.optimizers.Nadam, tf.keras.optimizers.RMSprop]
if len(sys.argv) > 1:
    paramaters = {
    'epochs' : int(sys.argv[1]),
    
    'sample' : int(sys.argv[2]),
    
    'res' : int(sys.argv[3]),
    
    'hidden_size' : int(sys.argv[4]),
    
    'concat' : int(sys.argv[5]),
    
    'regularizer' : kernel_regularizer_list[int(sys.argv[6])],
    
    'optimizer' : optimizer_list[int(sys.argv[7])],
    
    'cnn_dropout' : 0.4,

    'rnn_dropout' : 0.2,

    'lr' : 5e-4,
    
    'run_id' : np.random.randint(1000,9000)
    }
    
else:
    paramaters = {
    'epochs' : 1,
    
    'sample' : 5,
    
    'res' : 8,
    
    'hidden_size' : 128,
    
    'concat' : 1,
    
    'regularizer' : None,
    
    'optimizer' : optimizer_list[0],
    
    'cnn_dropout' : 0.4,

    'rnn_dropout' : 0.2,

    'lr' : 5e-4,
    
    'run_id' : np.random.randint(1000,9000)
    }
   
print(paramaters)
for key,val in paramaters.items():
    exec(key + '=val')
epochs = epochs
sample = sample 
res = res 
hidden_size =hidden_size
concat = concat
regularizer = regularizer
optimizer = optimizer
cnn_dropout = cnn_dropout
rnn_dropout = rnn_dropout
lr = lr
run_id = run_id
n_timesteps = sample
def split_dataset_xy(dataset):
    dataset_x1 = [uu[0] for uu in dataset]
    dataset_x2 = [uu[1] for uu in dataset]
    dataset_y = [uu[-1] for uu in dataset]
    return (np.array(dataset_x1),np.array(dataset_x2)[:,:n_timesteps,:]),np.array(dataset_y)

def cnn_gru(n_timesteps = 5, hidden_size = 128,input_size = 32, concat = True, 
            optimizer = tf.keras.optimizers.Adam, ):
    '''
    
    CNN RNN combination that extends the CNN to a network that achieves 
    ~80% accuracy on full res cifar.

    Parameters
    ----------
    n_timesteps : TYPE, optional
        DESCRIPTION. The default is 5.
    img_dim : TYPE, optional
        DESCRIPTION. The default is 32.
    hidden_size : TYPE, optional
        DESCRIPTION. The default is 128.
    input_size : TYPE, optional
        DESCRIPTION. The default is 32.

    Returns
    -------
    model : TYPE
        DESCRIPTION.

    '''
    inputA = keras.layers.Input(shape=(n_timesteps,input_size,input_size,3))
    inputB = keras.layers.Input(shape=(n_timesteps,2))

    # define CNN model

    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(32,(2,2),activation='relu', padding = 'same'))(inputA)
    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(32,(2,2),activation='relu', padding = 'same'))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.MaxPooling2D(pool_size=(2, 2)))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.Dropout(cnn_dropout))(x1)

    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(64,(2,2),activation='relu', padding = 'same'))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(64,(2,2),activation='relu', padding = 'same'))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.MaxPooling2D(pool_size=(2, 2)))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.Dropout(cnn_dropout))(x1)

    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(128,(2,2),activation='relu', padding = 'same'))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.Conv2D(128,(2,2),activation='relu', padding = 'same'))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.MaxPooling2D(pool_size=(2, 2)))(x1)
    x1=keras.layers.TimeDistributed(keras.layers.Dropout(cnn_dropout))(x1)
    print(x1.shape)


    x1=keras.layers.TimeDistributed(keras.layers.Flatten())(x1)
    print(x1.shape)
    if concat:
        x = keras.layers.Concatenate()([x1,inputB])
    else:
        x = x1
    print(x.shape)

    # define LSTM model
    x = keras.layers.GRU(hidden_size,input_shape=(n_timesteps, None),
                         return_sequences=True,recurrent_dropout=rnn_dropout,
                         kernel_regularizer=regularizer)(x)
    
    x = keras.layers.Flatten()(x)
    #Add another dense layer (prior it reached 62%)
    x = keras.layers.Dense(512, activation="relu")(x)
    x = keras.layers.Dense(10,activation="softmax")(x)
    model = keras.models.Model(inputs=[inputA,inputB],outputs=x, name = 'cnn_gru_v1_{}'.format(concat))
    opt=optimizer(lr=lr)

    model.compile(
        optimizer=opt,
        loss="sparse_categorical_crossentropy",
        metrics=["sparse_categorical_accuracy"],
    )
    return model

rnn_net = cnn_gru(n_timesteps = sample, hidden_size = hidden_size,input_size = res, concat = concat)
#cnn_net = cnn_net = extended_cnn_one_img(n_timesteps = sample, input_size = res, dropout = cnn_dropout)


# hp = HP()
# hp.save_path = 'saved_runs'

# hp.description = "syclop cifar net search runs"
# hp.this_run_name = 'syclop_{}'.format(rnn_net.name)
# deploy_logs()

train_dataset, test_dataset = create_cifar_dataset(images, labels,res = res,
                                    sample = sample, return_datasets=True, 
                                    mixed_state = False, add_seed = 0,
                                    )
                                    #bad_res_func = bad_res101, up_sample = True)

train_dataset_x, train_dataset_y = split_dataset_xy(train_dataset)
test_dataset_x, test_dataset_y = split_dataset_xy(test_dataset)


print("##################### Fit {} and trajectories model on training data res = {} ##################".format(rnn_net.name,res))
rnn_history = rnn_net.fit(
    train_dataset_x,
    train_dataset_y,
    batch_size=64,
    epochs=epochs,
    # We pass some validation for
    # monitoring validation loss and metrics
    # at the end of each epoch
    validation_data=(test_dataset_x, test_dataset_y),
    verbose = 0)

# print('################# {} Validation Accuracy = '.format(cnn_net.name),cnn_history.history['val_sparse_categorical_accuracy'])
# print('################# {} Training Accuracy = '.format(cnn_net.name),rnn_history.history['sparse_categorical_accuracy'])

print('################# {} Validation Accuracy = '.format(rnn_net.name),rnn_history.history['val_sparse_categorical_accuracy'])
print('################# {} Training Accuracy = '.format(rnn_net.name),rnn_history.history['sparse_categorical_accuracy'])


plt.figure()
plt.plot(rnn_history.history['sparse_categorical_accuracy'], label = 'train')
plt.plot(rnn_history.history['val_sparse_categorical_accuracy'], label = 'val')
# plt.plot(cnn_history.history['sparse_categorical_accuracy'], label = 'cnn train')
# plt.plot(cnn_history.history['val_sparse_categorical_accuracy'], label = 'cnn val')
plt.legend()
plt.grid()
plt.ylim(0.5,0.63)
plt.title('{} on cifar res = {} hs = {} dropout = {}, num samples = {}'.format(rnn_net.name, res, hidden_size,cnn_dropout,sample))
plt.savefig('{} on Cifar res = {}, no upsample, val accur = {} hs = {} dropout = {}.png'.format(rnn_net.name,res,rnn_history.history['val_sparse_categorical_accuracy'][-1], hidden_size,cnn_dropout))

with open('/home/labs/ahissarlab/orra/imagewalker/cifar_net_search/{}'.format(run_id), 'wb') as file_pi:
    pickle.dump(rnn_history.history, file_pi)
    
# with open('/home/labs/ahissarlab/orra/imagewalker/cifar_net_search/{}HistoryDict'.format(cnn_net.name), 'wb') as file_pi:
#     pickle.dump(cnn_history.history, file_pi)


dataset_update(rnn_history, rnn_net,paramaters)    
write_to_file(rnn_history, rnn_net,paramaters)    
    
    